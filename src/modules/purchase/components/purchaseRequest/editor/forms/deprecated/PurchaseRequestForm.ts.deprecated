import { FormMode } from '@generic/types';
import { WithUser, 
  // withUser 
} from '@layout/hoc/withUser';
// import { IPurchaseDetail } from '@purchase/classes/response/purchaseRequest';
import { PurchaseRequestFormView } from '@purchase/components/purchaseRequest/editor/forms/PurchaseRequestFormView';
import { InjectedIntlProps, 
  // injectIntl 
} from 'react-intl';
// import { connect } from 'react-redux';
import { 
  // compose, HandleCreators, lifecycle, 
  // mapper, 
  // ReactLifeCycleFunctions, 
  StateHandler, StateHandlerMap, 
  // StateUpdaters,
  //  StateUpdaters,
  //  withHandlers,
  //  withStateHandlers,
  // withStateHandlers 
  } from 'recompose';
import { 
  // formValueSelector, 
  // getFormValues, 
  InjectedFormProps, reduxForm } from 'redux-form';

const formName = 'purchaseRequest';
export type PurchaseRequestItemFormData = {
  uid: string | null;
  description: string;
  request: number;
};

export type PurchaseRequestFormData = {
  information: {
    uid: string | null | undefined;
    customerUid: string | null | undefined;
    projectUid: string | null | undefined;
    advance: number;
    notes: string | null | undefined;
    date: string | null | undefined;
    currencyType: string | null | undefined;
    rate: number;
    request: number;
  }
    items: {
      purchaseItems: PurchaseRequestItemFormData[];
    }
  };

interface OwnProps {
  formMode: FormMode; 
}

interface OwnHandlers {
  handleEventListener: (event: CustomEvent) => void;
}

interface OwnState {
  currentPurchase?: PurchaseRequestFormData | undefined;
}

interface OwnStateUpdaters extends StateHandlerMap<OwnState> {
  setPurchase: StateHandler<OwnState>;
  setRequest: StateHandler<OwnState>;
}
interface FormValueProps {
  formIsCurrencyIDR: boolean | false;
  formCurrencyType: string | null;
  formRate: number | 1;
  formValue: number | 1;
  // formValues: PurchaseRequestFormData;
}

export type PurchaseRequestFormProps
  = InjectedFormProps<PurchaseRequestFormData, OwnProps>
  & InjectedIntlProps
  & WithUser
  & OwnProps
  & OwnHandlers
  & OwnState
  & OwnStateUpdaters
  & FormValueProps
  & OwnProps;

// const createProps: mapper<PurchaseRequestFormProps, OwnState> = (props: PurchaseRequestFormProps): OwnState => {
//   return {
//     currentPurchase: props.initialData
//   };
// };

// const stateUpdaters: StateUpdaters<{}, OwnState, OwnStateUpdaters> = {
//   setRequest: (prevState: OwnState) => (requestValue: number) => {
//     if (prevState.currentPurchase) {
//       return {
//         ...prevState,
//         currentPurchase: {
//           ...prevState.currentPurchase,
//           request: requestValue,
//         }
//       };
//     }

//     return {
//       ...prevState
//     };
//   }
// };

// const handlers: HandleCreators<PurchaseRequestFormProps, OwnHandlers> = {
//   handleEventListener: (props: PurchaseRequestFormProps) => (event: CustomEvent) => {
//     const formValues = event.detail as PurchaseRequestFormData;
//     // const { setRequest } = props;

//     let requestValue: number = 0;

//     if (formValues.items) {
//       formValues.items.purchaseItems.forEach(items => requestValue += items.request);
//     }
//   }
// };

// const lifecycles: ReactLifeCycleFunctions<PurchaseRequestFormProps, OwnState> = {
//   componentDidMount() {
//     addEventListener('PUR_REQ_FORM', this.props.handleEventListener);
//   },
//   componentDidUpdate(prevProps: PurchaseRequestFormProps) {
//     // when assignment detail are not equals between previous and current
//     if (prevProps.initialData !== this.props.initialData) {

//       // when assignment response are filled from saga
//       if (this.props.initialData) {
//         this.props.setPurchase(this.props.initialData);
//       }
//     }

//     // when formValues props are not equals between previous and current
//     if (prevProps.formValues !== this.props.formValues) {

//       // when form is 'reset' formValues will be cleared as undefined then clear state
//       if (this.props.formValues === undefined) {
//         this.props.setPurchase();
//       }
//     }
//   },
//   componentWillUnmount() {
//     removeEventListener('PUR_REQ_FORM', this.props.handleEventListener);
//   }
// };

// const selector = formValueSelector(formName);

// const mapStateToProps = (state: any): FormValueProps => {
//   const currencyType = selector(state, 'information.currencyType');
//   const rate = selector(state, 'information.rate');
//   const valueUsd = selector(state, 'information.valueUsd');

//   return {
//     formIsCurrencyIDR: currencyType === 'SCR01',
//     formCurrencyType: currencyType,
//     formRate: rate,
//     formValue: valueUsd,
//     // formValues: getFormValues(formName)(state) as PurchaseRequestFormData
//   };
// };

// const enhance = compose<PurchaseRequestFormProps, OwnProps & InjectedFormProps<PurchaseRequestFormData, OwnProps>>(
//   connect(mapStateToProps),
//   withUser,
//   injectIntl,
//   // withStateHandlers(currentP, stateUpdaters),
//   withHandlers(handlers),
//   lifecycle(lifecycles),
// )(PurchaseRequestFormView);

// const enhance = connect(mapStateToProps)(PurchaseRequestFormView);

export const PurchaseRequestForm = reduxForm<PurchaseRequestFormData, OwnProps>({
  form: formName,
  touchOnChange: true,
  touchOnBlur: true,
  destroyOnUnmount: true,
  // onChange: (values: PurchaseRequestFormData) => {
  //   dispatchEvent(new CustomEvent('PUR_REQ_FORM', { detail: values }));
  // },
// })(enhance);
})(PurchaseRequestFormView);