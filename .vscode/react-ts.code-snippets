{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"recompose": {
		"description": "Create recompose enhancer",
		"scope": "typescript",
		"prefix": "encer",
		"body": [
			"import {",
			"\tcompose,",
			"\tHandleCreators,",
			"\tlifecycle,",
			"\tmapper,",
			"\tReactLifeCycleFunctions,",
			"\tsetDisplayName,",
			"\tStateHandler,",
			"\tStateHandlerMap,",
			"\tStateUpdaters,",
			"\twithHandlers,",
			"\twithStateHandlers,",
			"} from 'recompose';",
			"",
			"import { ${TM_FILENAME_BASE}View } from './${TM_FILENAME_BASE}View';",
			"",
			"interface IOwnOption {",
			"\tinitialCount: number;",
			"}",
			"",
			"interface IOwnState {",
			"\tcounter: number;",
			"\tvalue: string;",
			"}",
			"",
			"interface IOwnStateUpdater extends StateHandlerMap<IOwnState> {",
			"\tsetIncrement: StateHandler<IOwnState>;",
			"\tsetDecrement: StateHandler<IOwnState>;",
			"\tsetValue: StateHandler<IOwnState>;",
			"}",
			"",
			"interface IOwnHandler {",
			"\thandleVoid: () => void;",
			"\thandleParams: (value: string) => void;",
			"}",
			"",
			"export type ${TM_FILENAME_BASE}Props",
			"\t= IOwnOption",
			"\t& IOwnState",
			"\t& IOwnStateUpdater",
			"\t& IOwnHandler;",
			"",
			"const createProps: mapper<IOwnOption, IOwnState> = (props: IOwnOption): IOwnState => ({",
			"\tcounter: props.initialCount,",
			"\tvalue: 'Test'",
			"});",
			"",
			"const stateUpdaters: StateUpdaters<${TM_FILENAME_BASE}Props, IOwnState, IOwnStateUpdater> = {",
			"\tsetIncrement: (prevState: IOwnState) => (value: number): Partial<IOwnState> => ({",
			"\t\tcounter: prevState.counter + value,",
			"\t}),",
			"\tsetDecrement: (prevState: IOwnState) => (value: number): Partial<IOwnState> => ({",
			"\t\tcounter: prevState.counter - value,",
			"\t}),",
			"\tsetValue: (prevState: IOwnState) => (value: string): Partial<IOwnState> => ({",
			"\t\tvalue,",
			"\t})",
			"};",
			"",
			"const handlerCreators: HandleCreators<${TM_FILENAME_BASE}Props, IOwnHandler> = {",
			"\thandleVoid: (props: ${TM_FILENAME_BASE}Props) => () => {",
			"\t\talert('void method was called');",
			"\t},",
			"\thandleParams: (props: ${TM_FILENAME_BASE}Props) => (value: string) => {",
			"\t\talert(`void method was called with param: '${value}'`);",
			"\t}",
			"};",
			"",
			"const lifeCycles: ReactLifeCycleFunctions<${TM_FILENAME_BASE}Props, IOwnState> = {",
			"\tcomponentWillMount() {",
			"\t\tconsole.log('component will mount');",
			"\t},",
			"\tcomponentWillReceiveProps() {",
			"\t\tconsole.log('component will receive props');",
			"\t},",
			"\tcomponentDidMount() {",
			"\t\tconsole.log('component did mount');",
			"\t},",
			"\tcomponentWillUpdate() {",
			"\t\tconsole.log('component will update');",
			"\t},",
			"\tcomponentDidUpdate() {",
			"\t\tconsole.log('component did update');",
			"\t},",
			"\tcomponentWillUnmount() {",
			"\t\tconsole.log('component will unmount');",
			"\t}",
			"};",
			"",
			"export const ${TM_FILENAME_BASE} = compose<${TM_FILENAME_BASE}Props, IOwnOption>(",
			"\tsetDisplayName('${TM_FILENAME_BASE}'),",
			"\twithStateHandlers(createProps, stateUpdaters),",
			"\twithHandlers(handlerCreators),",
			"\tlifecycle(lifeCycles)",
			")(${TM_FILENAME_BASE}View);${1}"
		]
	}
}